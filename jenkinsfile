pipeline {
    agent any
    
    environment {
        DOCKER_REPO = 'lohitha12100706/flask-todo-app'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.IMAGE_TAG = "${BUILD_NUMBER}"
                    env.GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                }
            }
        }
        
        stage('Docker Build') {
            when { 
                anyOf {
                    branch 'main'
                    changeRequest target: 'main'
                }
            }
            steps {
                script {
                    def image = docker.build("${DOCKER_REPO}:${IMAGE_TAG}")
                    docker.build("${DOCKER_REPO}:latest")
                }
            }
        }
        
        stage('Push to Docker Hub') {
            when { branch 'main' }
            steps {
                script {
                    docker.withRegistry('', 'dockerhub-credentials') {
                        docker.image("${DOCKER_REPO}:${IMAGE_TAG}").push()
                        docker.image("${DOCKER_REPO}:latest").push()
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            when { branch 'main' }
            steps {
                withKubeConfig([credentialsId: 'kubeconfig']) {
                    sh """
                        helm upgrade --install flask-todo-app ./helm-chart \
                            --set image.repository=${DOCKER_REPO} \
                            --set image.tag=${IMAGE_TAG} \
                            --namespace production \
                            --create-namespace
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo "✅ Build ${BUILD_NUMBER} completed successfully"
            echo "Docker: ${DOCKER_REPO}:${IMAGE_TAG}"
        }
        failure {
            echo "❌ Build ${BUILD_NUMBER} failed"
        }
    }
}